[{"create-email":"foo@gmail.com","create-time":1611003042734,"title":"Datomic Query Examples","children":[{"string":"Instructions","create-email":"foo@gmail.com","create-time":1611003121182,"heading":1,"children":[{"string":"Read my blog about [Roam Query](https://www.zsolt.blog/2021/01/Roam-Data-Structure-Query.html).","create-email":"foo@gmail.com","create-time":1611425814479,"uid":"QhQ5XH5F0","edit-time":1611472415628,"edit-email":"foo@gmail.com"},{"string":"This will only work if you have [Roam42](https://roam42.com) installed.","create-email":"foo@gmail.com","create-time":1611474003431,"uid":"TQRulmKTx","edit-time":1611474040344,"edit-email":"foo@gmail.com"},{"string":"Shift click on [[Template/Datomic Query]] and start the roam/js script under **Common functions**. You only need to do this only once.","create-email":"foo@gmail.com","create-time":1611402998312,"refs":[{"uid":"oWt-dL1Mq"}],"uid":"vpwOdi4o8","edit-time":1611472448533,"edit-email":"foo@gmail.com",":block/refs":[{":block/uid":"oWt-dL1Mq"}]},{"string":"Choose between two methods to run a query:","create-email":"foo@gmail.com","create-time":1611400896358,"children":[{"string":"**simple-query**: If you do not want to pass parameters to the query and you do not want any javascript post-processing, use the simple-query. ","create-email":"foo@gmail.com","create-time":1611400942260,"uid":"SBhGNftMp","edit-time":1611400942260,"edit-email":"foo@gmail.com"},{"string":"**advanced-query**: The advanced query provides you with full flexibility. But looks a bit more messy.","create-email":"foo@gmail.com","create-time":1611400616108,"uid":"0NDTvAakR","edit-time":1611400980007,"edit-email":"foo@gmail.com"}],"uid":"MrwYACfyz","edit-time":1611403065198,"edit-email":"foo@gmail.com"},{"string":"To generate the **template for your query** run the appropriate Roam42 SmartBlock:","create-email":"foo@gmail.com","create-time":1611400727434,"children":[{"string":"Datomic simple-template","create-email":"foo@gmail.com","create-time":1611400774875,"uid":"n22r6BROj","edit-time":1611400787924,"edit-email":"foo@gmail.com"},{"string":"Datomic advanced-template","create-email":"foo@gmail.com","create-time":1611400787918,"uid":"IgqbeUQGC","edit-time":1611400795523,"edit-email":"foo@gmail.com"}],"uid":"Y_fK_YnPB","edit-time":1611472473108,"edit-email":"foo@gmail.com"},{"string":"I have added very basic (and limited) post processing of the result. ","create-email":"foo@gmail.com","create-time":1611403118368,"children":[{"string":"Results are displayed in a single block using `::hiccup`. This is to avoid filling your graph with unnecessary number of blocks.","create-email":"foo@gmail.com","create-time":1611404024487,"uid":"im3b6Tj8a","edit-time":1611404121309,"edit-email":"foo@gmail.com"},{"string":"Displaying Page Titles and Dates as links","create-email":"foo@gmail.com","create-time":1611403585859,"children":[{"string":"At the moment these only work outside of (pull ) statements, and outside of aggregate functions.","create-email":"foo@gmail.com","create-time":1611403217135,"uid":"fNaoEeTEa","edit-time":1611403250745,"edit-email":"foo@gmail.com"},{"string":"I convert **Page Titles** into page links.","create-email":"foo@gmail.com","create-time":1611403148147,"children":[{"string":"Designate the title filed by adding :name to the field name","create-email":"foo@gmail.com","create-time":1611403206768,"children":[{"string":"?title:name","create-email":"foo@gmail.com","create-time":1611403280400,"uid":"3dHMHrV2Q","edit-time":1611403284125,"edit-email":"foo@gmail.com"}],"uid":"HvpZ8lzzw","edit-time":1611403279165,"edit-email":"foo@gmail.com"},{"string":"Designate the corresponding uid by:","create-email":"foo@gmail.com","create-time":1611403284118,"children":[{"string":"placing the uid immediately after the ?title:name field","create-email":"foo@gmail.com","create-time":1611403297375,"uid":"z1sjcpK-9","edit-time":1611403312487,"edit-email":"foo@gmail.com"},{"string":"and adding :uid to the field name","create-email":"foo@gmail.com","create-time":1611403312606,"children":[{"string":"?title:uid","create-email":"foo@gmail.com","create-time":1611403320983,"uid":"67WxtZJvF","edit-time":1611403327138,"edit-email":"foo@gmail.com"}],"uid":"hmzzoSaNs","edit-time":1611403335383,"edit-email":"foo@gmail.com"}],"uid":"v0vqfCYmn","edit-time":1611403297381,"edit-email":"foo@gmail.com"}],"uid":"62FB__9FE","edit-time":1611403189151,"edit-email":"foo@gmail.com"},{"string":"I convert dates to **Daily Notes** links.","create-email":"foo@gmail.com","create-time":1611403160533,"children":[{"string":"Designate a field to be converted by adding :date to it","create-email":"foo@gmail.com","create-time":1611403337424,"children":[{"string":"?edit:date or ?create:date","create-email":"foo@gmail.com","create-time":1611403367722,"uid":"i9osh02dj","edit-time":1611403383147,"edit-email":"foo@gmail.com"}],"uid":"Xvsl1TN_1","edit-time":1611403364726,"edit-email":"foo@gmail.com"}],"uid":"QsUyjJ330","edit-time":1611403194536,"edit-email":"foo@gmail.com"}],"uid":"6_DJMo44U","edit-time":1611404131793,"edit-email":"foo@gmail.com"},{"string":"Displaying nested results as a table in the table in the table...","create-email":"foo@gmail.com","create-time":1611403617951,"children":[{"string":"When executing a query that includes a (pull ) statement the result will be a tree, not a table. Technically speaking the result is a JSON data structure.","create-email":"foo@gmail.com","create-time":1611403626735,"uid":"aRadf-vaF","edit-time":1611403906449,"edit-email":"foo@gmail.com"},{"string":"I render query results according to the following logic","create-email":"foo@gmail.com","create-time":1611403649987,"children":[{"string":"The top level of the result-set is displayed as rows of a table, with values as the columns.","create-email":"foo@gmail.com","create-time":1611403684538,"uid":"Vnc1St5E_","edit-time":1611471146493,"edit-email":"foo@gmail.com"},{"string":"Nested levels in the result-set alternate between being rendered in columns or rows.","create-email":"foo@gmail.com","create-time":1611403707174,"uid":"NohmtTuVQ","edit-time":1611403824741,"edit-email":"foo@gmail.com"},{"string":"At nested levels I use MAXROWS/4 to limit the number of rows to display. Even with this the final result set could reach thousands of rows.","create-email":"foo@gmail.com","create-time":1611403911791,"uid":"I1TAWDK4k","edit-time":1611471035955,"edit-email":"foo@gmail.com"}],"uid":"hGqG8skLZ","edit-time":1611403752020,"edit-email":"foo@gmail.com"}],"uid":"vEkWRQxz6","edit-time":1611404155862,"edit-email":"foo@gmail.com"}],"uid":"icP4g__X3","edit-time":1611403148153,"edit-email":"foo@gmail.com"},{"string":"MAXROWS is set to 40 by default. In the advanced-query you can change this number.","create-email":"foo@gmail.com","create-time":1611003406320,"uid":"DPPLRsxKg","edit-time":1611403429766,"edit-email":"foo@gmail.com"},{"string":"Execute your query by pressing the button **nested** under the query.","create-email":"foo@gmail.com","create-time":1611003478226,"uid":"LJ62Pl6Q1","edit-time":1611472516705,"edit-email":"foo@gmail.com"},{"string":"If you find this helpful **üôè say thanks** on Twitter [@zsviczian](https://twitter.com/zsviczian). If you like it even more, [‚òï Buy me a Coffee](https://ko-fi.com/zsolt) as a show of your appreciation.","create-email":"foo@gmail.com","create-time":1611472314374,"uid":"Y8iE6fExF","edit-time":1611474194116,"edit-email":"foo@gmail.com"}],"uid":"1cA6rPdzD","edit-time":1611474002486,"edit-email":"foo@gmail.com"},{"string":"Examples","create-email":"foo@gmail.com","create-time":1611472535755,"heading":1,"children":[{"string":"Graph statistics","create-email":"foo@gmail.com","create-time":1611411840466,"heading":1,"children":[{"string":"How many pages do I have in my graph?","create-email":"foo@gmail.com","create-time":1611411931188,"heading":2,"children":[{"string":"```clojure\n[:find (count ?title)\n :where [_ :node/title ?title]]```","create-email":"foo@gmail.com","create-time":1611411852140,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611411858415,"uid":"bkp3R2QSb","edit-time":1611472134444,"edit-email":"foo@gmail.com"}],"uid":"aq5u9Nc8Z","edit-time":1611411893183,"edit-email":"foo@gmail.com"}],"uid":"eFN8etWlI","edit-time":1611422184857,"edit-email":"foo@gmail.com"},{"string":"How many paragraphs do I have?","create-email":"foo@gmail.com","create-time":1611411949714,"heading":2,"children":[{"string":"```clojure\n[:find (count ?string) \n :where [_ :block/string ?string]]```","create-email":"foo@gmail.com","create-time":1611411962306,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611411987528,"uid":"QOOoJAJBE","edit-time":1611472131228,"edit-email":"foo@gmail.com"}],"uid":"azwRapNII","edit-time":1611412033090,"edit-email":"foo@gmail.com"}],"uid":"Fr95gEjvM","edit-time":1611422182115,"edit-email":"foo@gmail.com"},{"string":"How many paragraphs do I have that are not code blocks?","create-email":"foo@gmail.com","create-time":1611412059491,"heading":2,"children":[{"string":"Solution using the advanced-template, this solutions is fast","create-email":"foo@gmail.com","create-time":1611415002582,"heading":3,"children":[{"string":"```javascript\nlet q = `[:find (distinct ?b) \n\t\t  :where [?b :block/string ?string] \n                 [(clojure.string/includes? ?string \"\\`\\`\\`\")]]'`;\nlet exclude = window.roamAlphaAPI.q(q);\n\nlet query = `[:find (count ?string)\n\t\t\t\t:in $ ?exclude\n\t\t\t\t:where [?b :block/string ?string]\n\t\t\t\t\t   [(!= ?b ?exclude)]]`;\n\nlet results = window.roamAlphaAPI.q(query,exclude);\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611415261353,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611415261353,"uid":"Jsw_Umf9c","edit-time":1611472127435,"edit-email":"foo@gmail.com"}],"uid":"rdpY5Z0nQ","edit-time":1611421953219,"edit-email":"foo@gmail.com"}],"uid":"mhhJQsksZ","edit-time":1611415031658,"edit-email":"foo@gmail.com"},{"string":"Solution using the simple-template, this solution will run very slow","create-email":"foo@gmail.com","create-time":1611415147684,"heading":3,"children":[{"string":"**Depending on the size of your graph and the power of your PC, this query may run into a browser timeout!**","create-email":"foo@gmail.com","create-time":1611415178267,"uid":"NZ-GdYfRg","edit-time":1611415204297,"edit-email":"foo@gmail.com"},{"string":"Note: the funny business with the + sign below is only required because I am filtering out code blocks based on the 3x`, but the same is used to create a code block that contains the query. If I would repeat that in the code, it would close the code block I am using below prematurely. ","create-email":"foo@gmail.com","create-time":1611412898121,"uid":"y5SGyRFLA","edit-time":1611415001458,"edit-email":"foo@gmail.com"},{"string":"```clojure\n[:find (count ?s2)\n :where [?b :block/string ?string]\n        [(clojure.string/includes? ?string \"``\"+\"`\")]\n \t\t[?b2 :block/string ?s2]\n \t\t[(!= ?b2 ?b)]]```","create-email":"foo@gmail.com","create-time":1611415165563,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611414556699,"uid":"TEpPwIpYp","edit-time":1611472119475,"edit-email":"foo@gmail.com"}],"uid":"s6qIJCnnl","edit-time":1611415207451,"edit-email":"foo@gmail.com"}],"uid":"6uzLWYJrz","edit-time":1611415165127,"edit-email":"foo@gmail.com"}],"uid":"YthhlXrji","edit-time":1611422189060,"edit-email":"foo@gmail.com"},{"string":"Which are my longest paragraphs that are not code blocks; and on which page do I find them?","create-email":"foo@gmail.com","create-time":1611415226310,"heading":2,"children":[{"string":"```javascript\nlet q = `[:find (distinct ?uid)\n\t\t  :where [?b :block/string ?string] \n\t\t\t\t [?b :block/uid ?uid]\n                 [(clojure.string/includes? ?string \"\\`\\`\\`\")]]'`;\nlet exclude = window.roamAlphaAPI.q(q);\n\nlet query = `[:find ?title:name ?title:uid ?block_uid ?size\n\t\t\t\t:where [?b :block/string ?string]\n\t\t\t\t\t   [?b :block/uid ?block_uid]\n\t\t\t\t\t   [?b :block/page ?p]\n\t\t\t\t\t   [?p :node/title ?title:name]\n\t\t\t\t\t   [?p :block/uid ?title:uid]\n\t\t\t\t\t   [(count ?string) ?size]]`;\n\nvar results = window.roamAlphaAPI.q(query).filter((item,index) => !exclude[0][0].includes(item[2]))\n\t\t\t\t\t\t\t\t\t\t  .sort((a,b) => b[3]-a[3]);\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611413318715,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611413322474,"uid":"kD1dhtIVP","edit-time":1611472101655,"edit-email":"foo@gmail.com"}],"uid":"AoUWVwE8a","edit-time":1611421997776,"edit-email":"foo@gmail.com"}],"uid":"wG_XDMjvC","edit-time":1611422062924,"edit-email":"foo@gmail.com"},{"string":"All blocks with at least 100 descendants","create-email":"foo@gmail.com","create-time":1611328752984,"heading":2,"children":[{"string":"Based on David Bieber's [work](https://davidbieber.com/snippets/2020-12-22-datalog-queries-for-roam-research/)","create-email":"foo@gmail.com","create-time":1611412348099,"uid":"LJNmlZOPr","edit-time":1611412350258,"edit-email":"foo@gmail.com"},{"string":"Excluding \"roam/css\"","create-email":"foo@gmail.com","create-time":1611405745267,"uid":"Z4LvuX4tO","edit-time":1611405807080,"edit-email":"foo@gmail.com"},{"string":"```javascript\nlet threshold = 100;\nlet rule =`[[(ancestor ?child ?parent) \n            [?parent :block/children ?child]]\n            [(ancestor ?child ?grand_parent) \n            [?parent :block/children ?child] \n            (ancestor ?parent ?grand_parent)]]\n           ]`;\n\nlet large_blocks = window.roamAlphaAPI.q(`\n\t\t[:find ?ancestor (count ?block)\n  \t \t:in $ % \n  \t \t:where [?ancestor :block/string]\n    \t\t\t[?block :block/string]\n    \t\t\t(ancestor ?block ?ancestor)]`,rule)\n     .filter((data, index) => {return data[1] >= threshold});\n\nlet query = `[:find ?title:name ?title:uid ?text ?uid ?childcount\n  \t\t\t  :in $ [[?block ?childcount] ...] [?exclude ...]\n  \t\t\t  :where [?block :block/string ?text]\n  \t\t\t\t\t [?block :block/uid ?uid]\n\t\t\t\t\t [?block :block/page ?page]\n\t\t\t\t\t [?page  :node/title ?title:name]\n\t\t\t\t\t [?page  :block/uid  ?title:uid]\n\t\t\t\t\t [(not= ?title:name ?exclude)]]`;\n\nlet results = window.roamAlphaAPI.q(query,large_blocks,[\"roam/css\"]).sort((a, b) => b[4] - a[4]);\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611328952670,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611328959168,"uid":"H8wA-YWV1","edit-time":1611472093445,"edit-email":"foo@gmail.com"}],"uid":"jrheE0qIF","edit-time":1611338761833,"edit-email":"foo@gmail.com"}],"uid":"EW5ACg0p9","edit-time":1611405745282,"edit-email":"foo@gmail.com"},{"string":"Pages with the highest number of blocks","create-email":"foo@gmail.com","create-time":1611348519912,"heading":2,"children":[{"string":"Based on David Bieber's [work](https://davidbieber.com/snippets/2020-12-22-datalog-queries-for-roam-research/)","create-email":"foo@gmail.com","create-time":1611412354259,"uid":"ORsW26j64","edit-time":1611412355854,"edit-email":"foo@gmail.com"},{"string":"Excluding \"roam/css\" and \"roam/js\"","create-email":"foo@gmail.com","create-time":1611405784520,"uid":"IqiqOEpPq","edit-time":1611405799883,"edit-email":"foo@gmail.com"},{"string":"```javascript\nlet query = `[:find ?title:name ?title:uid (count ?blocks)\n\t\t\t\t:in $ [?exclude]\n\t\t\t\t:where [?page :node/title ?title:name]\n\t\t\t\t\t   [?page :block/uid ?title:uid]\n\t\t\t\t\t   [?blocks :block/page ?page]\n\t\t\t\t\t   [(not= ?title:name ?exclude)]]`;\n\nlet results = window.roamAlphaAPI.q(query,['roam/css','roam/js']).sort((a, b) => b[2] - a[2]);\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611348531345,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}   ","create-email":"foo@gmail.com","create-time":1611348559847,"uid":"0MXfkmvMr","edit-time":1611472087126,"edit-email":"foo@gmail.com"}],"uid":"Qxsva0hm6","edit-time":1611422032490,"edit-email":"foo@gmail.com"}],"uid":"Csu2EAIRr","edit-time":1611348530459,"edit-email":"foo@gmail.com"}],"uid":"ccrt4ed7Z","edit-time":1611411930392,"edit-email":"foo@gmail.com"},{"string":"String search","create-email":"foo@gmail.com","create-time":1611472560414,"heading":1,"children":[{"string":"List pages within the \"roam/\" namespace","create-email":"foo@gmail.com","create-time":1611003484883,"heading":2,"children":[{"string":"```clojure\n[:find ?title:name ?title:uid ?time:date\n :where [?page :node/title ?title:name]\n        [?page :block/uid ?title:uid]\n        [?page :edit/time ?time:date]\n        [(clojure.string/starts-with? ?title:name \"roam/\")]]```","create-email":"foo@gmail.com","create-time":1611003062472,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611252913869,"uid":"I3ufWoilZ","edit-time":1611473657913,"edit-email":"foo@gmail.com"}],"uid":"gPm64zIX3","edit-time":1611403486538,"edit-email":"foo@gmail.com"}],"uid":"Y2TqjSyhs","edit-time":1611404312244,"edit-email":"foo@gmail.com"},{"string":"List pages containing \"temp\"","create-email":"foo@gmail.com","create-time":1611254211684,"heading":2,"children":[{"string":"Simple, but case sensitive solution","create-email":"foo@gmail.com","create-time":1611422262747,"heading":3,"children":[{"string":"```clojure\n[:find ?title:name ?title:uid ?time:date\n :where [?page :node/title ?title:name]\n        [?page :block/uid ?title:uid]\n        [?page :edit/time ?time:date]\n        [(clojure.string/includes? ?title:name \"temp\")]]```","create-email":"foo@gmail.com","create-time":1611254235111,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611404234147,"uid":"cRC9rOlRM","edit-time":1611472071297,"edit-email":"foo@gmail.com"}],"uid":"4edDGWUvW","edit-time":1611422618067,"edit-email":"foo@gmail.com"}],"uid":"GXlWdYta9","edit-time":1611422271285,"edit-email":"foo@gmail.com"},{"string":"Advanced, case insensitive solution","create-email":"foo@gmail.com","create-time":1611422254966,"heading":3,"children":[{"string":"```javascript\nlet fragment = 'temp';\nlet query = `[:find ?title:name ?title:uid ?time:date\n \t\t\t  :where [?page :node/title ?title:name]\n        \t\t\t [?page :block/uid ?title:uid]\n        \t\t\t [?page :edit/time ?time:date]]`;\n\nlet results = window.roamAlphaAPI.q(query)\n  .filter((item,index) => item[0].toLowerCase().indexOf(fragment) > 0)\n  .sort((a,b) => a[0].localeCompare(b[0]));\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611422291062,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611422298196,"uid":"qCBrX1Edd","edit-time":1611472063703,"edit-email":"foo@gmail.com"}],"uid":"OKQk8c_sn","edit-time":1611468874015,"edit-email":"foo@gmail.com"}],"uid":"UTAlwRRFJ","edit-time":1611422291067,"edit-email":"foo@gmail.com"}],"uid":"D57NkgAIs","edit-time":1611422576457,"edit-email":"foo@gmail.com"}],"uid":"XaXjMPouS","edit-time":1611472564434,"edit-email":"foo@gmail.com"},{"string":"Pages modified today","create-email":"foo@gmail.com","create-time":1611328029638,"heading":1,"children":[{"string":"Based on David Bieber's [work](https://davidbieber.com/snippets/2020-12-22-datalog-queries-for-roam-research/)","create-email":"foo@gmail.com","create-time":1611328683380,"uid":"y10UZZFMH","edit-time":1611328716543,"edit-email":"foo@gmail.com"},{"string":"```javascript\nlet rule = `[[ (ancestor ?b ?a) \n             [?a :block/children ?b]] \n             [ (ancestor ?b ?a) \n             [?parent :block/children ?b] \n             (ancestor ?parent ?a)]] \n\t\t    ]`;\n\nlet query = `[\n  :find ?page_title:name ?page_title:uid\n  :in $ ?start_of_day %\n  :where\n  [?page :node/title ?page_title:name]\n  [?page :block/uid ?page_title:uid]\n  (ancestor ?block ?page)\n  [?block :edit/time ?time]\n  [(> ?time ?start_of_day)]\n]`;\n\nlet results = window.roamAlphaAPI.q(query,new Date().setHours(0, 0, 0, 0),rule);\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611328039956,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611328053578,"uid":"jdreJJeFf","edit-time":1611472057677,"edit-email":"foo@gmail.com"}],"uid":"uf73U4gkJ","edit-time":1611328662786,"edit-email":"foo@gmail.com"}],"uid":"EdzmeYsQU","edit-time":1611328039091,"edit-email":"foo@gmail.com"},{"string":"List top-level blocks on this page","create-email":"foo@gmail.com","create-time":1611003526196,"heading":1,"children":[{"string":"Simple version","create-email":"foo@gmail.com","create-time":1611404367463,"heading":2,"children":[{"string":"```clojure\n[:find ?block_string\n :where\n [?p :node/title \"Datomic Query Examples\"]\n [?p :block/children ?c]\n [?c :block/string ?block_string]]```","create-email":"foo@gmail.com","create-time":1611003563824,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611404332321,"uid":"lz9fb1Cn3","edit-time":1611472046858,"edit-email":"foo@gmail.com"}],"uid":"AHf_8t0Fw","edit-time":1611404357362,"edit-email":"foo@gmail.com"}],"uid":"vPE_hwtEr","edit-time":1611404371735,"edit-email":"foo@gmail.com"},{"string":"Advanced version","create-email":"foo@gmail.com","create-time":1611404383708,"heading":2,"children":[{"string":"```javascript\nlet uid = document.querySelector(\"textarea.rm-block-input\").id;\nuid = uid.substring( uid.length -9);\n\nlet query = `[:find ?order ?block_string\n\t\t\t\t:in $ ?uid\n\t\t\t\t:where [?origin :block/uid ?uid]\n\t\t\t\t\t   [?origin :block/page ?page]\n\t\t\t\t\t   [?page :block/children ?children]\n\t\t\t\t\t   [?children :block/order ?order]\n\t\t\t\t\t   [?children :block/string ?block_string]]`;\n\nlet results = window.roamAlphaAPI.q(query,uid).sort((a,b) => a[0]-b[0]);\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611404389182,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611404401542,"uid":"uNQo8oeSs","edit-time":1611472036179,"edit-email":"foo@gmail.com"}],"uid":"6xr3sFjn0","edit-time":1611405626876,"edit-email":"foo@gmail.com"}],"uid":"h6Jp9ZxKB","edit-time":1611404389187,"edit-email":"foo@gmail.com"}],"uid":"UPsM3f-Z_","edit-time":1611404554753,"edit-email":"foo@gmail.com"},{"string":"Understanding the Roam data structure","create-email":"foo@gmail.com","create-time":1611422669522,"heading":1,"children":[{"string":"List attributes associated with :node/title","create-email":"foo@gmail.com","create-time":1611004070989,"heading":2,"children":[{"string":"I found the namespace predicate here: [clojure.core namespace | ClojureDocs - Community-Powered Clojure Documentation and Examples](https://clojuredocs.org/clojure.core)","create-email":"foo@gmail.com","create-time":1611406239835,"uid":"0Hxct8w36","edit-time":1611406257614,"edit-email":"foo@gmail.com"},{"string":"```clojure\n[:find ?namespace ?attribute\n :where\n  [?a :node/title]\n  [?a ?attribute]\n  [(namespace ?attribute) ?namespace]]```","create-email":"foo@gmail.com","create-time":1611208092973,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611209250114,"uid":"_gS_2GAiZ","edit-time":1611472018013,"edit-email":"foo@gmail.com"}],"uid":"siIDPTpL_","edit-time":1611405233939,"edit-email":"foo@gmail.com"}],"uid":"EK_uz6yPj","edit-time":1611422669528,"edit-email":"foo@gmail.com"},{"string":"List all attributes and their namespace in Roam","create-email":"foo@gmail.com","create-time":1611405294951,"heading":2,"children":[{"string":"Simple version","create-email":"foo@gmail.com","create-time":1611405357649,"heading":3,"children":[{"string":"```clojure\n  [:find ?Namespace ?Attribute\n   :where [_ ?Attribute]\n  [(namespace ?Attribute) ?Namespace]]```","create-email":"foo@gmail.com","create-time":1611397201590,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611397866892,"uid":"B0u6iXx2z","edit-time":1611472014192,"edit-email":"foo@gmail.com"}],"uid":"DjddwZ9ti","edit-time":1611405466835,"edit-email":"foo@gmail.com"}],"uid":"xeyMpf6GT","edit-time":1611405366780,"edit-email":"foo@gmail.com"},{"string":"Advanced version","create-email":"foo@gmail.com","create-time":1611405366775,"heading":3,"children":[{"string":"Sort the results alphabetically first by Namespace, then by Attribute","create-email":"foo@gmail.com","create-time":1611405488056,"uid":"XAfk1FbTt","edit-time":1611405532429,"edit-email":"foo@gmail.com"},{"string":"```javascript\nlet query = `[:find ?Namespace ?Attribute\n\t\t\t  :where [_ ?Attribute]\n  \t\t\t\t\t [(namespace ?Attribute) ?Namespace]]`;\n\nlet results = window.roamAlphaAPI.q(query).sort((a, b) => (a[0].localeCompare(b[0])==0) ? a[1].localeCompare(b[1]) : a[0].localeCompare(b[0]));\n\nreturn [query, results];```","create-email":"foo@gmail.com","create-time":1611395814884,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611395822803,"uid":"MjSN0oW83","edit-time":1611472010769,"edit-email":"foo@gmail.com"}],"uid":"KdTM4XkxA","edit-time":1611405617214,"edit-email":"foo@gmail.com"}],"uid":"k9B9QDkgd","edit-time":1611405374575,"edit-email":"foo@gmail.com"}],"uid":"vIu0EuR__","edit-time":1611405357655,"edit-email":"foo@gmail.com"}],"uid":"4IW6Mfa2P","edit-time":1611422669522,"edit-email":"foo@gmail.com"},{"string":"Pull examples","create-email":"foo@gmail.com","create-time":1611422738727,"heading":1,"children":[{"string":"Pull top level paragraphs on this page","create-email":"foo@gmail.com","create-time":1611425169359,"heading":2,"children":[{"string":"```clojure\n[:find (pull ?e [*{:block/children [*]}]) \n :where [?e :node/title \"Datomic Query Examples\"]]```","create-email":"foo@gmail.com","create-time":1611408771363,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611408771363,"uid":"ojMY112nT","edit-time":1611472002674,"edit-email":"foo@gmail.com"}],"uid":"zXaVTh81g","edit-time":1611423952396,"edit-email":"foo@gmail.com"}],"uid":"6UU-Iglgh","edit-time":1611425186533,"edit-email":"foo@gmail.com"},{"string":"Pull list of children for 'roam/' namespace","create-email":"foo@gmail.com","create-time":1611425193614,"heading":2,"children":[{"string":"```clojure\n[:find ?title:name ?title:uid ?time:date (pull ?page [*])\n :where [?page :node/title ?title:name]\n        [?page :block/uid ?title:uid]\n        [?page :edit/time ?time:date]\n        [(clojure.string/starts-with? ?title:name \"roam/\")]]```","create-email":"foo@gmail.com","create-time":1611425215709,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611425223601,"uid":"yDQ2RUm8R","edit-time":1611471998754,"edit-email":"foo@gmail.com"}],"uid":"YqQeBQe6-","edit-time":1611425235177,"edit-email":"foo@gmail.com"}],"uid":"qZBQ9gdA0","edit-time":1611425213916,"edit-email":"foo@gmail.com"}],"uid":"TVWKAcytG","edit-time":1611422745347,"edit-email":"foo@gmail.com"}],"uid":"1NeB5cfJ3","edit-time":1611472539002,"edit-email":"foo@gmail.com"}],"edit-time":1611307789423,"edit-email":"foo@gmail.com"},{"create-email":"foo@gmail.com","create-time":1610990910063,"title":"Template/Datomic Query","children":[{"string":"Common functions","create-email":"foo@gmail.com","create-time":1611340466472,"heading":1,"children":[{"edit-time":1611340483601,"children":[{"string":"```javascript\nwindow.datomicQuery = {\n  MAXROWS: 40,\n  reg_fields_string: null,\n  reg_fields: null,\n  reg_field: null,\n  reg_is_pull: null,\n  field_names: [],\n  output: '',\n  \n  init() {\n    this.reg_fields_string = new RegExp(/\\:find\\s+(.+)/);\n    this.reg_fields        = new RegExp(/(\\?[^\\s]+|\\(pull.+\\))/g);\n    this.reg_field         = new RegExp(/\\?([\\w\\d]+)\\:?([\\w\\d]+)?/);\n    this.reg_is_pull       = new RegExp(/(\\(.+\\))/);//(\\(\\s?pull.+\\))\n  },\n  \n  //Helper functions to get clickeable links\n  getLocation(uid) {\n    if (window.location.href.includes('/page/')) \n      return window.location.href.substring(window.location.origin.length+1,window.location.href.length-9)+uid;\n    else\n      return window.location.href.substring(window.location.origin.length+1,window.location.href.length)+'/page/'+uid\n  },\n  pageLink(title, uid) {\n    return `[:a {:class \"rm-page__title\", :href \"${this.getLocation(uid)}\"} \"${title}\"]`;\n  },\n  toTwoDigits(number) {\n    return  (\"0\" + number).slice(-2);\n  },\n  msToDate(ms) {\n    dt = new Date(ms);\n    month = this.toTwoDigits(dt.getMonth()+1);\n    day = this.toTwoDigits(dt.getDate());\n    year = dt.getFullYear();\n    uid = [month,day,year].join('-');\n    title = [year, month, day].join('-');\n    return this.pageLink(title,uid);\n  },\n\n  //In the end only the \"quotation mark\" needs an escape character due to hiccup\n  encodeString(s){ \n    return s.replace(/[\"]/g, function(i) {\n      return '\\\\\"';\n    });\n  },\n\n  //Helper function to check if variable is a dictionary object\n  isDict(v) {\n    return typeof v==='object' && v!==null && !(v instanceof Array) && !(v instanceof Date);\n  },\n\n  //recursive function to process the result set tree\n  printResult(o,new_lines) {\n    //Dictionary\n    if (this.isDict(o)) {\n      s = '[:table {:class \"detail\"} [:tbody ';\n      for (var key in o) {\n        val = o[key];\n        if (key == 'title') \n          if (o['uid'] !== undefined)\n            val = this.pageLink(val,o['uid']);\n        if (key == 'time') \n          val = this.msToDate(o[key]);\n        s += `[:tr [:td {:class \"key\"} \"${key}\"][:td {:class \"val\"} ${(o[key] != val) ? val : this.printResult(val,new_lines)}]]`;\n      }\n      return s+']]';\n    }\n    //Array\n    else if (o instanceof Array) {  \n  \t  s = (new_lines) ? '[:table [:tbody ' : '';\n      for (let i=0;i<this.MAXROWS/4 && i<o.length;i++) {\n      //for (e of o) {       \n      \ts += ((new_lines) ? '[:tr {:class \"' +(i%2 ? 'even val\"}':'odd val\"}') : '[:td {:class \"val\"}') + this.printResult(o[i],!new_lines)+']';\n      }\n      return s + ((new_lines) ? ']]' : '');\n    }\n    //Value\n    else\n      if (o != null) \n      \treturn '\"' + this.encodeString(o.toString()) + '\"';\n      else \n        return '\"\"';\n  },\n    \n  getParentBlock() {\n    let uid = document.querySelector(\"textarea.rm-block-input\").id;\n    uid = uid.substring( uid.length -9);\n    return s = window.roamAlphaAPI.q(`[:find ?s\n  \t\t\t\t\t\t\t\t:in $ ?uid\n  \t\t\t\t\t\t\t\t:where \n  \t\t\t\t\t\t\t\t[?b :block/uid ?uid]\n  \t\t\t\t\t\t\t\t[?p :block/children ?b]\n\t\t\t\t\t\t\t\t[?p :block/string ?s]]`,uid);\n  }, \n\n  buildTableHeader(query) {\n    this.output = ':hiccup [:div \"Click here to edit block...\" [:br][:div {:class \"scroller dont-focus-block\"}  [:table [:tbody [:tr ';\n    this.field_names = [];    \n    let fields = Array.from(query.match(this.reg_fields_string)[1].matchAll(this.reg_fields));\n\tfor (var f of fields) \n      if (f[0].match(this.reg_is_pull) != null) \n        this.field_names.push([f[0],'pull']);\n      else {\n        m = f[0].match(this.reg_field);\n      this.field_names.push([m[1],(m[2] === undefined) ? '':m[2]]);\n    }\n    this.field_names.forEach(function(field,i) { \n      if (field[1]!='uid') \n        window.datomicQuery.output += '[:td {:class \"head\"} \"'+field[0]+'\"]';\n    });\n    this.output += ']';\n  },\n\n  processResults(results,query) {\n    query = query.replaceAll('\\n',' ').replace(':in','\\n:in').replace(':where','\\n:where');\n    this.buildTableHeader(query);\n    //The first two levels are handled differently to enable processing of page links at the top level\n    for (let i=0;i<this.MAXROWS && i<results.length;i++) {\n      let title = '';\n      this.output += '[:tr {:class \"' +(i%2 ? 'even\"}':'odd\"}');\n      this.field_names.forEach(function(fn,j) {\n        switch(fn[1]) {\n          case 'name': title = results[i][j]; break;\n          case 'uid' : window.datomicQuery.output +=  '[:td {:class \"val\"}' + window.datomicQuery.pageLink(title, results[i][j]) +']'; break;\n          case 'date': window.datomicQuery.output +=  '[:td {:class \"val\"}' + window.datomicQuery.msToDate(results[i][j]) +']';   + ']'; break;  \n          default:     window.datomicQuery.output +=  '[:td {:class \"val\"}' + window.datomicQuery.printResult(results[i][j],false) +']'; \n        }\n      });\n      this.output += ']';\n    }\n    return this.output;\n  }\n}\n\nwindow.datomicQuery.init();\nlet css = window.document.styleSheets[0];\ncss.insertRule('table.detail { width:100%; border-style: solid; border-width: thin; }', css.cssRules.length);\ncss.insertRule('td.key { padding-right: 10px; filter: brightness(110%); vertical-align: top; }', css.cssRules.length);\ncss.insertRule('td.head { padding-right: 10px; background-color: rgba(0,0,0,0.15); filter: brightness(120%); font-weight: 800; vertical-align: top; }', css.cssRules.length);\ncss.insertRule('td.val { padding-right: 10px; vertical-align: top; }', css.cssRules.length);\ncss.insertRule('tr.odd { background: rgba(255,255,255,0.05); vertical-align: top; }', css.cssRules.length);\ncss.insertRule('tr.even { background-color: rgba(0,0,0,0.05); vertical-align: top;}', css.cssRules.length);\ncss.insertRule('div.scroller { width: 100%; max-height: 500px; overflow-y: hidden; overflow: auto; }', css.cssRules.length);```","create-email":"foo@gmail.com","create-time":1611340483595,"uid":"6z_WpH2wC","edit-time":1611471026874,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"FAvi1waBI"}],"uid":"L4y5xRzk_",":block/refs":[{":block/uid":"FAvi1waBI"}],"string":"{{[[roam/js]]}}","create-email":"foo@gmail.com","create-time":1611340474630,"edit-email":"foo@gmail.com"}],"uid":"qewpxrldh","edit-time":1611349370812,"edit-email":"foo@gmail.com"},{"string":"Query execution","create-email":"foo@gmail.com","create-time":1611349318194,"heading":1,"children":[{"edit-time":1611400862266,"children":[{"string":"","create-email":"foo@gmail.com","create-time":1611341377021,"children":[{"string":"<%J:```javascript\nlet reg_parent_string = new RegExp('\\`\\`\\`clojure\\\\s(.+)\\`\\`\\`','s');\n\nlet query;\ntry{\n  query = window.datomicQuery.getParentBlock()[0][0].match(reg_parent_string)[1];\n} catch (err) {\n  return 'ERROR - make sure you run the query from a block nested immediately under your query.';\n}\n\n//Execute query\nlet results;\ntry { \t\n  results = window.roamAlphaAPI.q(query);\n} catch (err) {\n  return err;\n}\n\nreturn window.datomicQuery.processResults(results,query) + ']]]]';```%>","create-email":"foo@gmail.com","create-time":1611341377021,"uid":"oBzda629V","edit-time":1611471554713,"edit-email":"foo@gmail.com"}],"uid":"kC8klyHzO","edit-time":1611341377021,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"sVeeyCg_c"}],"uid":"SqaSpXgkh",":block/refs":[{":block/uid":"sVeeyCg_c"}],"string":"#42SmartBlock Datomic simple-query <%NOCURSOR%><%HIDE%>","create-email":"foo@gmail.com","create-time":1611341377021,"edit-email":"foo@gmail.com"},{"edit-time":1611400880580,"children":[{"string":"","create-email":"foo@gmail.com","create-time":1611341377021,"children":[{"string":"<%J:```javascript\nlet reg_parent_string = new RegExp('\\`\\`\\`javascript\\\\s(.+)\\`\\`\\`','s');\nlet script_to_run;\ntry {\n  script_to_run = window.datomicQuery.getParentBlock()[0][0].match(reg_parent_string)[1];\n} catch (err) {\n  return 'ERROR - make sure you run the query from a block nested immediately under your query.';\n}\n\n//Execute query\nlet res;\ntry {\n  res = new Function(script_to_run.toString())();\n} catch (err) {\n  return err;\n}\nlet query = res[0];\nlet results = res[1];\n\nreturn window.datomicQuery.processResults(results,query) + ']]]]';```%>","create-email":"foo@gmail.com","create-time":1611341377021,"uid":"sh6_5TPxP","edit-time":1611471604802,"edit-email":"foo@gmail.com"}],"uid":"dxHaqLh8V","edit-time":1611341377021,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"sVeeyCg_c"}],"uid":"0HOoaqrLC",":block/refs":[{":block/uid":"sVeeyCg_c"}],"string":"#42SmartBlock Datomic advanced-query <%NOCURSOR%><%HIDE%>","create-email":"foo@gmail.com","create-time":1611341377021,"edit-email":"foo@gmail.com"}],"uid":"jtkCCTLv5","edit-time":1611349365652,"edit-email":"foo@gmail.com"},{"string":"Templates","create-email":"foo@gmail.com","create-time":1611349307857,"heading":1,"children":[{"edit-time":1611311249577,"children":[{"string":"{{CLICK TO REMOVE HEADER MESSAGE:42SmartBlock:Remove query-template header}}\n^^1.^^ If within the **[:find** clause you designate a field with **:name** (e.g. ?title:name) it must be followed by a field designated by **:uid** (e.g. ?title:uid), these two fields will be combined into a page link. \n^^2.^^ Fields containing time data, designated with **:date** will be converted into a friendly format date including a link to the daily page.\n^^3.^^ Fields within a **(pull ) or an aggregate function e.g. (min )** will not be checked for :name :uid :date \n<%J:```javascript\nlet s = \"\\`\\`\\`clojure\\n\";\ns += '[:find ?title:name ?title:uid ?time:date\\n';\ns += ' :where [?page :node/title ?title:name]\\n';\ns += '        [?page :block/uid ?title:uid]\\n';\ns += '        [?page :edit/time ?time:date]\\n';\ns += '        [(clojure.string/starts-with? ?title:name \"roam/\")]]';\ns += \"\\`\\`\\`\";\nreturn s;```%>","create-email":"foo@gmail.com","create-time":1611311242432,"children":[{"string":"{{CLICK TO RUN SIMPLE-QUERY:42SmartBlock:Datomic simple-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611311242432,"uid":"i5NKEsc2j","edit-time":1611471693969,"edit-email":"foo@gmail.com"}],"uid":"6X__ZdM-0","edit-time":1611401893788,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"sVeeyCg_c"}],"uid":"dGdWvhJEd",":block/refs":[{":block/uid":"sVeeyCg_c"}],"string":"#42SmartBlock Datomic simple-template <%NOCURSOR%>","create-email":"foo@gmail.com","create-time":1611311242433,"edit-email":"foo@gmail.com"},{"edit-time":1611311168426,"children":[{"string":"{{CLICK TO REMOVE HEADER MESSAGE:42SmartBlock:Remove query-template header}}\n^^1.^^ If within the **[:find** clause you designate a field with **:name** (e.g. ?title:name) it must be followed by a field designated by **:uid** (e.g. ?title:uid), these two fields will be combined into a page link. \n^^2.^^ Fields containing time data, designated with **:date** will be converted into a friendly format date including a link to the daily page.\n^^3.^^ Fields within a **(pull ) or an aggregate function e.g. (min )** will not be checked for :name :uid :date\n<%J:```javascript\nlet s = \"\\`\\`\\`javascript\\n\";\ns += \"window.datomicQuery.MAXROWS = 40;\\n\\n\";\ns += \"let rule = \\`\\`;\\n\\n\";\ns += \"let query = `[:find ?title:name ?title:uid ?time:date\\n\";\ns += \"\t\t\t\t:in $ ?namespace\\n\";\ns += \"\t\t\t\t:where [?page :node/title ?title:name]\\n\";\ns += \"\t\t\t\t\t   [?page :block/uid ?title:uid]\\n\";\ns += \"\t\t\t\t\t   [?page :edit/time ?time:date]\\n\";\ns += \"\t\t\t\t\t   [(clojure.string/starts-with? ?title:name ?namespace)]]`;\\n\\n\";\ns += \"let results = window.roamAlphaAPI.q(query,'roam/');\\n\\n\";\ns += \"return [query, results];\";\ns += \"\\`\\`\\`\";\nreturn s;```%>","create-email":"foo@gmail.com","create-time":1611308764753,"children":[{"string":"{{CLICK TO RUN ADVANCED-QUERY:42SmartBlock:Datomic advanced-query:42RemoveButton=false}}","create-email":"foo@gmail.com","create-time":1611264582215,"uid":"kjDjpWrgP","edit-time":1611471704381,"edit-email":"foo@gmail.com"}],"uid":"THreEg6fN","edit-time":1611402911589,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"sVeeyCg_c"}],"uid":"C_C2P86Zr",":block/refs":[{":block/uid":"sVeeyCg_c"}],"string":"#42SmartBlock Datomic advanced-template <%NOCURSOR%>","create-email":"foo@gmail.com","create-time":1611264302389,"edit-email":"foo@gmail.com"},{"edit-time":1611401748726,"children":[{"string":"<%J:```javascript\nlet txt = document.querySelector(\"textarea.rm-block-input\").value;\ntxt = txt.substr(txt.indexOf('`'));\ndocument.querySelector(\"textarea.rm-block-input\").value = '';\nreturn txt;```%>","create-email":"foo@gmail.com","create-time":1611401074414,"uid":"7T1qsgBE6","edit-time":1611402861130,"edit-email":"foo@gmail.com"}],"refs":[{"uid":"sVeeyCg_c"}],"uid":"RLr9-Cv2-",":block/refs":[{":block/uid":"sVeeyCg_c"}],"string":"#42SmartBlock Remove query-template header <%NOCURSOR%> <%HIDE%>","create-email":"foo@gmail.com","create-time":1611401024934,"edit-email":"foo@gmail.com"}],"uid":"URJADDfXx","edit-time":1611349318201,"edit-email":"foo@gmail.com"}],"edit-time":1611307810740,"edit-email":"foo@gmail.com"}]